import 'package:cloud_firestore/cloud_firestore.dart';

Future<void> populateTestDataForUser(String userEmail) async {
  final db = FirebaseFirestore.instance;

    if (userEmail != "u4284112739@gmail.com") {
    return;
  }
  // V√©rifier si les donn√©es de test existent d√©j√†
  final existingCollections = await db
      .collection('collections')
      .where('emailUser', isEqualTo: userEmail)
      .where('isTestData', isEqualTo: true)
      .get();

  if (existingCollections.docs.isNotEmpty) {
    print("‚úÖ Les donn√©es de test existent d√©j√† pour $userEmail");
    return;
  }

  // D√©finir les collections et leurs documents de test
  final collectionsData = [
    {
      'name': 'Journal Personnel',
      'documents': [
        {
          'title': 'Ma premi√®re journ√©e',
          'feeling': 'üòä Heureux',
          'content': 'Aujourd\'hui a √©t√© une journ√©e fantastique ! J\'ai commenc√© un nouveau projet qui me passionne beaucoup.',
          'date': DateTime.now().subtract(const Duration(days: 2)),
        },
        {
          'title': 'R√©flexions du soir',
          'feeling': 'ü§î Pensif',
          'content': 'Je repense √† mes objectifs de l\'ann√©e. Il est important de faire le point r√©guli√®rement sur ses progr√®s.',
          'date': DateTime.now().subtract(const Duration(days: 1)),
        },
      ],
    },
    {
      'name': 'Travail',
      'documents': [
        {
          'title': 'R√©union √©quipe',
          'feeling': 'üíº Professionnel',
          'content': 'R√©union productive avec l\'√©quipe. Nous avons d√©fini les priorit√©s pour le prochain sprint.',
          'date': DateTime.now().subtract(const Duration(days: 3)),
        },
        {
          'title': 'Formation Flutter',
          'feeling': 'üöÄ Motiv√©',
          'content': 'J\'ai appris de nouvelles techniques en Flutter aujourd\'hui. Le d√©veloppement mobile devient de plus en plus int√©ressant !',
          'date': DateTime.now().subtract(const Duration(hours: 5)),
        },
      ],
    },
    {
      'name': 'Sant√©',
      'documents': [
        {
          'title': 'S√©ance de sport',
          'feeling': 'üí™ √ânergique',
          'content': 'Excellente s√©ance de sport ce matin ! Je me sens plein d\'√©nergie pour attaquer la journ√©e.',
          'date': DateTime.now().subtract(const Duration(days: 1)),
        },
      ],
    },
  ];

  final batch = db.batch();
  final now = FieldValue.serverTimestamp();

  // Cr√©er les collections et leurs documents
  for (final collectionData in collectionsData) {
    // Cr√©er la collection avec un ID auto-g√©n√©r√© (comme dans addCollection)
    final collectionRef = db.collection('collections').doc();
    
    batch.set(collectionRef, {
      "emailUser": userEmail,
      "nameCollection": collectionData['name'],
      "createdAt": now,
      "isTestData": true, // Flag pour identifier les donn√©es de test
    });

    // Cr√©er les documents pour cette collection
    final documents = collectionData['documents'] as List<Map<String, dynamic>>;
    for (final docData in documents) {
      final entryRef = db.collection('entries').doc();
      
      batch.set(entryRef, {
        "collectionId": collectionRef.id, // R√©f√©rence √† la collection
        "email": userEmail,
        "title": docData['title'],
        "feeling": docData['feeling'],
        "content": docData['content'],
        "date": (docData['date'] as DateTime).toIso8601String(),
      });
    }
  }

  await batch.commit();
  print("‚úÖ Les collections et documents de test ont √©t√© cr√©√©s pour $userEmail");
}